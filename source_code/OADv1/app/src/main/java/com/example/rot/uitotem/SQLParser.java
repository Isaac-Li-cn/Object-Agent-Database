package com.example.rot.uitotem;/* Generated By:JavaCC: Do not edit this line. SQLParser.java */
import java.util.ArrayList;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

public class SQLParser implements SQLParserConstants {

  public static ParseResult sqlParse(String sqlInput)
  {
    try
    {
      InputStream s=new ByteArrayInputStream(sqlInput.getBytes());
      SQLParser p = new SQLParser(s);
      return p.start();
    }
    catch(Exception e)
    {
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
    return null;
  }

  final public ParseResult start() throws ParseException {
    trace_call("start");
    try {
  ParseResult result;
      if (jj_2_1(2)) {
        result = createClass();
      } else if (jj_2_2(2)) {
        result = createSelectDeputy();
      } else if (jj_2_3(2)) {
        result = drop();
      } else if (jj_2_4(2)) {
        result = insert();
      } else if (jj_2_5(2)) {
        result = delete();
      } else if (jj_2_6(2)) {
        result = select();
      } else if (jj_2_7(2)) {
        result = update();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLON);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("start");
    }
  }

  final public ParseResult createClass() throws ParseException {
    trace_call("createClass");
    try {
  ParseResult result = new ParseResult();
  ParseResult selectResult;
  Token className;
      jj_consume_token(CREATE);
      jj_consume_token(CLASS);
    result.Type = 0;
      className = jj_consume_token(ID);
    result.className = className.image;
      jj_consume_token(LEFT_BRACKET);
      result.attrList = attributeDef();

      jj_consume_token(RIGHT_BRACKET);
      if (jj_2_8(2)) {
        selectResult = select();
    result.selectClassName = selectResult.selectClassName;
      } else {
        ;
      }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("createClass");
    }
  }

  final public ParseResult createSelectDeputy() throws ParseException {
    trace_call("createSelectDeputy");
    try {
  ParseResult result = new ParseResult();
  ParseResult selectResult;
  Token className;
      jj_consume_token(CREATE);
      jj_consume_token(SELECTDEPUTY);
    result.Type = 1;
      className = jj_consume_token(ID);
    result.className = className.image;
      if (jj_2_9(2)) {
        jj_consume_token(LEFT_BRACKET);
        result.attrList = attributeDef();
        jj_consume_token(RIGHT_BRACKET);
      } else {
        ;
      }
      selectResult = select();
    result.selectClassName = selectResult.selectClassName;
    result.attrNameList = selectResult.attrNameList;
    result.where = selectResult.where;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("createSelectDeputy");
    }
  }

  final public ParseResult drop() throws ParseException {
    trace_call("drop");
    try {
  ParseResult result;
  Token className;
      jj_consume_token(DROP);
      jj_consume_token(CLASS);
      className = jj_consume_token(ID);
    result = new ParseResult();
    result.Type = 2;
    result.className = className.image;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("drop");
    }
  }

  final public ParseResult insert() throws ParseException {
    trace_call("insert");
    try {
  ParseResult result = new ParseResult();
  ArrayList<String> valList = new ArrayList<String>();
  Token className;
  Token val;
      jj_consume_token(INSERT);
      jj_consume_token(INTO);
      className = jj_consume_token(ID);
      jj_consume_token(VALUES);
    result.Type = 3;
    result.className = className.image;
      jj_consume_token(LEFT_BRACKET);
      if (jj_2_10(2)) {
        val = jj_consume_token(INTNUMBER);
                           valList.add(val.image);
      } else if (jj_2_11(2)) {
        val = jj_consume_token(STRING);
    valList.add(val.image.substring(1, val.image.length() - 1));
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_1:
      while (true) {
        if (jj_2_12(2)) {
          ;
        } else {
          break label_1;
        }
        jj_consume_token(COMMA);
        if (jj_2_13(2)) {
          val = jj_consume_token(INTNUMBER);
                                   valList.add(val.image);
        } else if (jj_2_14(2)) {
          val = jj_consume_token(STRING);
    valList.add(val.image.substring(1, val.image.length() - 1));
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RIGHT_BRACKET);
    result.valueList = valList;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("insert");
    }
  }

  final public ParseResult update() throws ParseException {
    trace_call("update");
    try {
  Token className;
  Token attrName;
  Token val;
  ArrayList<AttrNameTuple> attrNameList = new ArrayList<AttrNameTuple>();
  AttrNameTuple attrNameRename;
  ArrayList<String> valList = new ArrayList<String>();
  WhereClause where = null;
      jj_consume_token(UPDATE);
      className = jj_consume_token(ID);
      jj_consume_token(SET);
      attrName = jj_consume_token(ID);
      jj_consume_token(EQUAL);
      if (jj_2_15(2)) {
        val = jj_consume_token(INTNUMBER);
                       valList.add(val.image);
      } else if (jj_2_16(2)) {
        val = jj_consume_token(STRING);
                       valList.add(val.image.substring(1, val.image.length()-1));
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
     attrNameRename = new AttrNameTuple(attrName.image, null);
     attrNameList.add(attrNameRename);
      label_2:
      while (true) {
        if (jj_2_17(2)) {
          ;
        } else {
          break label_2;
        }
        jj_consume_token(COMMA);
        attrName = jj_consume_token(ID);
        jj_consume_token(EQUAL);
        if (jj_2_18(2)) {
          val = jj_consume_token(INTNUMBER);
                      valList.add(val.image);
        } else if (jj_2_19(2)) {
          val = jj_consume_token(STRING);
                    valList.add(val.image.substring(1, val.image.length()-1));
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
     attrNameRename = new AttrNameTuple(attrName.image, null);
     attrNameList.add(attrNameRename);
      }
      if (jj_2_20(2)) {
        jj_consume_token(WHERE);
        where = where_expr();
      } else {
        ;
      }
    ParseResult result = new ParseResult();
    result.Type = 7;
    result.className = className.image;
    result.valueList = valList;
    result.attrNameList = attrNameList;
    result.where = where;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("update");
    }
  }

  final public ParseResult delete() throws ParseException {
    trace_call("delete");
    try {
  ParseResult result = new ParseResult();
  Token className;
  WhereClause where = new WhereClause();
      jj_consume_token(DELETE);
      jj_consume_token(FROM);
      className = jj_consume_token(ID);
      jj_consume_token(WHERE);
      where = where_expr();
    result.Type = 4;
    result.className = className.image;
    result.where = where;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("delete");
    }
  }

  final public ParseResult select() throws ParseException {
    trace_call("select");
    try {
  ParseResult result = new ParseResult();
  ArrayList<AttrNameTuple> selectAttr;
  Token className;
  Token selectClassName;
  WhereClause where = null;
      jj_consume_token(SELECT);
      if (jj_2_23(2)) {
        selectAttr = attributeSelect();
        jj_consume_token(FROM);
        selectClassName = jj_consume_token(ID);
        if (jj_2_21(2)) {
          jj_consume_token(WHERE);
          where = where_expr();
        } else {
          ;
        }
    result.Type = 5;
    result.attrNameList = selectAttr;
    result.selectClassName = selectClassName.image;
    result.where = where;
    {if (true) return result;}
      } else if (jj_2_24(2)) {
        jj_consume_token(ID);
        jj_consume_token(CROSS);
        className = jj_consume_token(ID);
        jj_consume_token(DOT);
        selectAttr = attributeSelect();
        jj_consume_token(FROM);
        selectClassName = jj_consume_token(ID);
        if (jj_2_22(2)) {
          jj_consume_token(WHERE);
          where = where_expr();
        } else {
          ;
        }
    result.Type = 6;
    result.selectClassName = selectClassName.image;
    result.attrNameList = selectAttr;
    result.className = className.image;
    result.where = where;
    {if (true) return result;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("select");
    }
  }

  final public ArrayList<Attribute> attributeDef() throws ParseException {
    trace_call("attributeDef");
    try {
  Token attrName;
  Token size;
  ArrayList<Attribute> result = new ArrayList<Attribute>();
  Attribute attr;
  Token defaultVal = null;
      attrName = jj_consume_token(ID);
      if (jj_2_27(2)) {
        jj_consume_token(INT);
        if (jj_2_25(2)) {
          jj_consume_token(EQUAL);
          defaultVal = jj_consume_token(INTNUMBER);
        } else {
          ;
        }
        if(defaultVal != null){
          attr = new Attribute(attrName.image, 0,4, defaultVal.image);
        }else{
          attr = new Attribute(attrName.image, 0,4, null);
        }
        result.add(attr);
        defaultVal = null;
      } else if (jj_2_28(2)) {
        jj_consume_token(CHAR);
        jj_consume_token(LEFT_BRACKET);
        size = jj_consume_token(INTNUMBER);
        jj_consume_token(RIGHT_BRACKET);
        if (jj_2_26(2)) {
          jj_consume_token(EQUAL);
          defaultVal = jj_consume_token(STRING);
        } else {
          ;
        }
        if(defaultVal != null){
          attr = new Attribute(attrName.image, 1, (new Integer(size.image)).intValue(), defaultVal.image.substring(1, defaultVal.image.length()-1));
        }else{
          attr = new Attribute(attrName.image, 1, (new Integer(size.image)).intValue(), null);
        }
        result.add(attr);
        defaultVal = null;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_3:
      while (true) {
        if (jj_2_29(2)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(COMMA);
        attrName = jj_consume_token(ID);
        if (jj_2_32(2)) {
          jj_consume_token(INT);
          if (jj_2_30(2)) {
            jj_consume_token(EQUAL);
            defaultVal = jj_consume_token(INTNUMBER);
          } else {
            ;
          }
        if(defaultVal != null){
          attr = new Attribute(attrName.image, 0,4, defaultVal.image);
        }else{
          attr = new Attribute(attrName.image, 0,4, null);
        }
        result.add(attr);
        defaultVal = null;
        } else if (jj_2_33(2)) {
          jj_consume_token(CHAR);
          jj_consume_token(LEFT_BRACKET);
          size = jj_consume_token(INTNUMBER);
          jj_consume_token(RIGHT_BRACKET);
          if (jj_2_31(2)) {
            jj_consume_token(EQUAL);
            defaultVal = jj_consume_token(STRING);
          } else {
            ;
          }
        if(defaultVal != null){
          attr = new Attribute(attrName.image, 1, (new Integer(size.image)).intValue(), defaultVal.image.substring(1, defaultVal.image.length()-1));
        }else{
          attr = new Attribute(attrName.image, 1, (new Integer(size.image)).intValue(), null);
        }
        result.add(attr);
        defaultVal = null;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("attributeDef");
    }
  }

  final public ArrayList<AttrNameTuple> attributeSelect() throws ParseException {
    trace_call("attributeSelect");
    try {
  Token attrName;
  Token attrRename;
  String name = "";
  ArrayList<AttrNameTuple> result = new ArrayList<AttrNameTuple>();
  AttrNameTuple n;
      label_4:
      while (true) {
        if (jj_2_34(2)) {
          attrName = jj_consume_token(ID);
        } else if (jj_2_35(2)) {
          attrName = jj_consume_token(INTNUMBER);
        } else if (jj_2_36(2)) {
          attrName = jj_consume_token(PLUS);
        } else if (jj_2_37(2)) {
          attrName = jj_consume_token(MINUS);
        } else if (jj_2_38(2)) {
          attrName = jj_consume_token(MULT);
        } else if (jj_2_39(2)) {
          attrName = jj_consume_token(DIV);
        } else if (jj_2_40(2)) {
          attrName = jj_consume_token(LEFT_BRACKET);
        } else if (jj_2_41(2)) {
          attrName = jj_consume_token(RIGHT_BRACKET);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
    name = name + attrName.image;
        if (jj_2_42(2)) {
          ;
        } else {
          break label_4;
        }
      }
    n = new AttrNameTuple(name, null);
    name = "";
      if (jj_2_43(2)) {
        jj_consume_token(AS);
        attrRename = jj_consume_token(ID);
    n.attrRename = attrRename.image;
      } else {
        ;
      }
    result.add(n);
      label_5:
      while (true) {
        if (jj_2_44(2)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(COMMA);
        label_6:
        while (true) {
          if (jj_2_45(2)) {
            attrName = jj_consume_token(ID);
          } else if (jj_2_46(2)) {
            attrName = jj_consume_token(INTNUMBER);
          } else if (jj_2_47(2)) {
            attrName = jj_consume_token(PLUS);
          } else if (jj_2_48(2)) {
            attrName = jj_consume_token(MINUS);
          } else if (jj_2_49(2)) {
            attrName = jj_consume_token(MULT);
          } else if (jj_2_50(2)) {
            attrName = jj_consume_token(DIV);
          } else if (jj_2_51(2)) {
            attrName = jj_consume_token(LEFT_BRACKET);
          } else if (jj_2_52(2)) {
            attrName = jj_consume_token(RIGHT_BRACKET);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
    name = name + attrName.image;
          if (jj_2_53(2)) {
            ;
          } else {
            break label_6;
          }
        }
    n = new AttrNameTuple(name, null);
    name = "";
        if (jj_2_54(2)) {
          jj_consume_token(AS);
          attrRename = jj_consume_token(ID);
    n.attrRename = attrRename.image;
        } else {
          ;
        }
    result.add(n);
      }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("attributeSelect");
    }
  }

  final public WhereClause where_expr() throws ParseException {
    trace_call("where_expr");
    try {
  WhereClause left;
  WhereClause right = null;
  WhereClause result;
      left = and_expr();
      if (jj_2_55(2)) {
        jj_consume_token(OR);
        right = where_expr();
      } else {
        ;
      }
    if(right == null ){
      {if (true) return left;}
    }else{
      result = new WhereClause();
      result.operationType = 8;
      result.left = left;
      result.right = right;
      {if (true) return result;}
    }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("where_expr");
    }
  }

  final public WhereClause and_expr() throws ParseException {
    trace_call("and_expr");
    try {
  WhereClause left;
  WhereClause right = null;
  WhereClause result;
      left = not_expr();
      if (jj_2_56(2)) {
        jj_consume_token(AND);
        right = and_expr();
      } else {
        ;
      }
    if(right == null ){
      {if (true) return left;}
    }else{
      result = new WhereClause();
      result.operationType = 7;
      result.left = left;
      result.right = right;
      {if (true) return result;}
    }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("and_expr");
    }
  }

  final public WhereClause not_expr() throws ParseException {
    trace_call("not_expr");
    try {
  WhereClause left;
  WhereClause right = null;
  WhereClause result;
      if (jj_2_57(2)) {
        jj_consume_token(NOT);
        left = not_expr();
    result = new WhereClause();
    result.operationType = 6;
    result.left = left;
      } else if (jj_2_58(2)) {
        result = cmp_expr();
      } else if (jj_2_59(2)) {
        jj_consume_token(LEFT_BRACKET);
        result = where_expr();
        jj_consume_token(RIGHT_BRACKET);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("not_expr");
    }
  }

  final public WhereClause cmp_expr() throws ParseException {
    trace_call("cmp_expr");
    try {
  Token numOrID;
  WhereClause left;
  WhereClause right = null;
  WhereClause result = null;
      if (jj_2_60(2)) {
        numOrID = jj_consume_token(INTNUMBER);
    left = new WhereClause();
    left.operationType = 9; left.valueInt = (new Integer(numOrID.image)).intValue();
      } else if (jj_2_61(2)) {
        numOrID = jj_consume_token(ID);
    left = new WhereClause();
    left.operationType = 10; left.valueString = numOrID.image;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_70(2)) {
        if (jj_2_62(2)) {
          jj_consume_token(BIGGER);
    result = new WhereClause();
    result.operationType = 0;
        } else if (jj_2_63(2)) {
          jj_consume_token(LESS);
    result = new WhereClause();
    result.operationType = 1;
        } else if (jj_2_64(2)) {
          jj_consume_token(EQUAL);
    result = new WhereClause();
    result.operationType = 2;
        } else if (jj_2_65(2)) {
          jj_consume_token(NOTEQUAL);
    result = new WhereClause();
    result.operationType = 3;
        } else if (jj_2_66(2)) {
          jj_consume_token(BIGGEREQUAL);
    result = new WhereClause();
    result.operationType = 4;
        } else if (jj_2_67(2)) {
          jj_consume_token(LESSEQUAL);
    result = new WhereClause();
    result.operationType = 5;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (jj_2_68(2)) {
          numOrID = jj_consume_token(INTNUMBER);
    right = new WhereClause();
    right.operationType = 9;
    right.valueInt = (new Integer(numOrID.image)).intValue();
        } else if (jj_2_69(2)) {
          numOrID = jj_consume_token(STRING);
    right = new WhereClause();
    right.operationType = 10;
    right.valueString = numOrID.image.substring(1, numOrID.image.length()-1);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
    if (result == null){
      {if (true) return left;}
    }else{
      result.left = left;
      result.right = right;
      {if (true) return result;}
    }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("cmp_expr");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(INSERT)) return true;
    if (jj_scan_token(INTO)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(DROP)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(CHAR)) return true;
    if (jj_scan_token(LEFT_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(INTNUMBER)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(INT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_68() {
    if (jj_scan_token(INTNUMBER)) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_scan_token(LESSEQUAL)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(SELECTDEPUTY)) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_scan_token(BIGGEREQUAL)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(CHAR)) return true;
    if (jj_scan_token(LEFT_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_65() {
    if (jj_scan_token(NOTEQUAL)) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(INTNUMBER)) return true;
    return false;
  }

  private boolean jj_3_64() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_scan_token(LESS)) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_scan_token(BIGGER)) return true;
    return false;
  }

  private boolean jj_3_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) {
    jj_scanpos = xsp;
    if (jj_3_67()) return true;
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3_69()) return true;
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(INT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_scan_token(INTNUMBER)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_70()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(CROSS)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) return true;
    }
    return false;
  }

  private boolean jj_3_56() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_scan_token(RIGHT_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(INTNUMBER)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(INTNUMBER)) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_scan_token(MULT)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(INTNUMBER)) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(RIGHT_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(UPDATE)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_scan_token(AS)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(MULT)) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(INTNUMBER)) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    if (jj_3_53()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_53()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(INTNUMBER)) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(AS)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(INTNUMBER)) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    if (jj_3_42()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_42()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_43()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public SQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[70];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SQLParser(InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SQLParser(InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SQLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SQLParser(SQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 70; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
